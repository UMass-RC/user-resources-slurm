#!/usr/bin/env python3
import re
import sys
import time
import atexit
import subprocess

SUBPROC_ARGV = ["_unity-slurm-job-top"]
# if a job ends, the output will be frozen for up to this length of time
PERIOD_SEC = 5


def num_running_jobs() -> int:
    squeue_out = subprocess.check_output(
        r"squeue --me --noheader --states=RUNNING --format='%i'", shell=True, text=True
    )
    jobids = squeue_out.strip().splitlines()
    return len(jobids)  # one newline per job


old_num_running_jobs = -1
subproc = subprocess.Popen(SUBPROC_ARGV)


def cleanup():
    if subproc is not None:
        subproc.terminate()
        subproc.wait()


atexit.register(cleanup)

try:
    while True:
        new_num_running_jobs = num_running_jobs()
        if old_num_running_jobs != new_num_running_jobs:
            old_num_running_jobs = new_num_running_jobs
            if subproc is not None:
                subproc.terminate()
                subproc.wait()
            if new_num_running_jobs == 0:
                subproc = None
                print("no running jobs.")
            else:
                subproc = subprocess.Popen(SUBPROC_ARGV)
        time.sleep(PERIOD_SEC)
except KeyboardInterrupt:
    sys.exit(0)

#!/usr/bin/env python3
import os
import re
import grp
import sys
import json
import shutil
import subprocess as subp
from typing import List

SINFO_CACHE_FILE_PATH = os.getenv(
    "SINFO_CACHE_FILE_PATH", "/modules/user-resources/cache/sinfo.json"
)
SINFO_N_CACHE_FILE_PATH = os.getenv(
    "SINFO_N_CACHE_FILE_PATH", "/modules/user-resources/cache/sinfo-N.json"
)
DOWN_STATES = {"DOWN", "DRAIN", "NOT_RESPONDING"}
MY_FILENAME = os.path.split(sys.argv[0])[-1]


def any_elem_is_in_list(any_of_these: list, in_this_list: list) -> bool:
    return any((x in in_this_list) for x in any_of_these)


def split_commas_strip_remove_empty_strings(list_str: str) -> list:
    return [x.strip() for x in list_str.split(",") if x.strip() != ""]


def closest_element_index(_list, target) -> int:
    """
    return the index of the list element which is closest to target
    """
    min_diff = None
    min_diff_index = -1
    for i, element in enumerate(_list):
        diff = element - target
        if i == 0 or abs(diff) < abs(min_diff):
            min_diff = diff
            min_diff_index = i
    return min_diff_index


def generate_progress_bar(frac: float, _len=15, fill_char="#") -> str:
    if frac < 0:
        frac = 0
    if frac > 1:
        frac = 1
    _len -= 2  # subtract beginning and end characters
    num_chars2frac = [x / _len for x in range(_len + 1)]  # [ 0, 1/len, 2/len, ... len/len=1 ]
    num_chars = closest_element_index(
        num_chars2frac, frac
    )  # round `frac` to the nearest character length fraction
    if num_chars == 0 and frac > 0:
        num_chars = 1
    if num_chars == _len and frac < 1:
        num_chars = _len - 1
    progress_bar = "[" + (fill_char * num_chars) + (" " * (_len - num_chars)) + "]"
    return progress_bar


def fmt_table(
    table, between_column_padding_size=5, alternate_brightness=True, left_padding_size=0
) -> List[str]:
    """
    I would use tabulate but I don't want nonstandard imports
    """
    output_lines = []
    # no row has more elements than the header row
    assert all(len(row) <= len(table[0]) for row in table)
    column_widths = [0] * len(table[0])
    for row in table:
        for i, element in enumerate(row):
            if len(str(element)) > column_widths[i]:
                column_widths[i] = len(str(element))
    column_widths = [x + between_column_padding_size for x in column_widths]
    header = ""
    for i, column_header in enumerate(table[0]):
        if i > 0:
            header += "|"
        header += str(column_header).center(column_widths[i] - 1)  # minus one for the '|'
    output_lines.append(header)
    output_lines.append("".join(["="] * len(header)))
    for row in table[1:]:
        if left_padding_size > 0:
            line = " " * left_padding_size
        else:
            line = ""
        for i, value in enumerate(row):
            line = line + str(value).ljust(column_widths[i])
        output_lines.append(line)
    if alternate_brightness:
        bright = "\033[0;1m"
        reset = "\033[0m"
        for i, line in enumerate(output_lines):
            if i <= 1:
                continue  # skip first 2 lines
            if i % 2 == 0:
                output_lines[i] = bright + line + reset

    return output_lines


def pipe_output_pager_exit(argv, output_lines, **kwargs):
    with subp.Popen(argv, stdin=subp.PIPE, stdout=sys.stdout, **kwargs) as proc:
        proc.stdin.write("\n".join(output_lines).encode())
        proc.stdin.flush()
    sys.exit(0)


def print_output_exit(output_lines):
    for line in output_lines:
        print(line)
    sys.exit(0)


def read_file_or_exec_command(file_path: str, argv: List[str]):
    if file_path.lower() != "none" and os.path.isfile(file_path):
        with open(file_path, "r", encoding="utf8") as file:
            return file.read()
    else:
        return subp.check_output(argv)


class SlurmNodeUsageAnalyzer:
    def __init__(self):
        self.my_posix_groups = [g.gr_name for g in grp.getgrall() if os.environ["USER"] in g.gr_mem]
        self.sinfo_n, self.sinfo, self.squeue, self.my_associations = (
            None,
            None,
            None,
            None,
        )
        self.my_slurm_accounts, self.my_qos = list(), list()
        self.nodes, self.partitions, self.node_partitions = dict(), dict(), dict()
        self.down_nodes = set()
        self.num_untrackable_gpus = 0
        print("collecting info from slurm...", file=sys.stderr)
        self.get_slurm_input()
        self.parse_slurm_input()

    def get_slurm_input(self):
        self.sinfo_n = json.loads(
            read_file_or_exec_command(SINFO_N_CACHE_FILE_PATH, ["sinfo", "--all", "-N", "--json"])
        )["sinfo"]
        self.sinfo = json.loads(
            read_file_or_exec_command(SINFO_CACHE_FILE_PATH, ["sinfo", "--all", "--json"])
        )["sinfo"]
        self.squeue = json.loads(subp.check_output(["squeue", "--all", "--json"]))
        self.my_associations = json.loads(
            subp.check_output(
                [
                    "sacctmgr",
                    "show",
                    "association",
                    "--json",
                    f"user={os.getenv('USER')}",
                ]
            )
        )

    def parse_slurm_input(self) -> None:
        self.my_slurm_accounts = [
            x["account"] for x in self.my_associations["associations"] if "account" in x
        ]
        self.my_qos = [x["qos"] for x in self.my_associations["associations"] if "qos" in x]
        for sinfo_element in self.sinfo:
            partition = sinfo_element["partition"]
            partition_name = partition["name"]
            for hostname in sinfo_element["nodes"]["nodes"]:
                try:
                    self.node_partitions[hostname].add(partition_name)
                except KeyError:
                    self.node_partitions[hostname] = set()
                    self.node_partitions[hostname].add(partition_name)
            # the same partition can occur in multiple sinfo elements
            if partition_name in self.partitions:
                if self.partitions[partition_name] == partition:
                    continue
                else:
                    raise RuntimeError(
                        "the same partition occurs multiple times with different information!"
                    )
            else:
                self.partitions[partition_name] = partition

        for sinfo_node in self.sinfo_n:
            assert len(sinfo_node["nodes"]["nodes"]) == 1
            name = sinfo_node["nodes"]["nodes"][0]
            # the node can occur multiple sinfo elements, once per partition
            if name in self.nodes or name in self.down_nodes:
                continue
            if any([state in DOWN_STATES for state in sinfo_node["node"]["state"]]):
                self.down_nodes.add(name)
                continue
            gpu_type = ""
            total_gpus = 0
            resources = sinfo_node["gres"]["total"].split(",")
            assert (
                sum([x.startswith("gpu:") for x in resources]) <= 1
            ), "there must be at most 1 GPU resource specified per node"
            for resource in resources:
                if resource.startswith("gpu:"):
                    # gpu:2080_ti:8(S:0-1)
                    # https://github.com/SchedMD/slurm/blob/51b5f5bcb8704a56cc58c56f02cb81bb3346636d/src/interfaces/gres.c#L4361
                    resource = re.sub(r"\(S:[\d-]+\)$", "", resource)
                    _, gpu_type, gpu_count_str = resource.split(":")
                    total_gpus += int(gpu_count_str)
            self.nodes[name] = {
                "total_cpus": int(sinfo_node["cpus"]["maximum"]),
                "alloc_cpus": 0,
                "total_gpus": total_gpus,
                "gpu_type": gpu_type,
                "alloc_gpus": 0,
                "total_mem_MB": int(sinfo_node["memory"]["maximum"]),
                "alloc_mem_MB": 0,
            }

        for job in self.squeue["jobs"]:
            if "RUNNING" not in job["job_state"]:
                continue
            for node_allocation in job["job_resources"]["nodes"]["allocation"]:
                hostname = node_allocation["name"]
                if hostname in self.down_nodes:
                    continue
                self.nodes[hostname]["alloc_cpus"] += node_allocation["cpus"]["count"]
                self.nodes[hostname]["alloc_mem_MB"] += node_allocation["memory"]["allocated"]
            job_gpus = 0
            # example: "cpu=4,mem=40G,node=1,billing=1,gres/gpu=1,gres/gpu:2080ti=1"
            for resource in job["tres_alloc_str"].split(","):
                if resource.startswith("gres/gpu="):
                    job_gpus += int(resource.split("=")[-1])
            # if this job is running on >1 node, we don't know on which nodes the GPUs are allocated
            if job["node_count"]["number"] > 1:
                self.num_untrackable_gpus += job_gpus
                continue
            job_node = job["nodes"]  # at this point there must be exactly 1 job node
            if job_node in self.down_nodes:
                continue  # don't bother tracking usage of down nodes
            self.nodes[job_node]["alloc_gpus"] += job_gpus

    def check_partition_access(self, partition_name: str) -> bool:
        """
        slurm says that it already hides partitions that the user doesn't have access to
        but it seems that slurm does not pay attention to allowed accounts and denied accounts
        so I do it myself
        """
        partition = self.partitions[partition_name]
        allowed_accts = split_commas_strip_remove_empty_strings(partition["accounts"]["allowed"])
        denied_accts = split_commas_strip_remove_empty_strings(partition["accounts"]["deny"])
        allowed_qos = split_commas_strip_remove_empty_strings(partition["qos"]["allowed"])
        denied_qos = split_commas_strip_remove_empty_strings(partition["qos"]["deny"])
        allowed_groups = split_commas_strip_remove_empty_strings(partition["groups"]["allowed"])
        if len(allowed_accts) > 0 and not any_elem_is_in_list(
            self.my_slurm_accounts, allowed_accts
        ):
            return False
        if len(denied_accts) > 0 and any_elem_is_in_list(self.my_slurm_accounts, denied_accts):
            return False
        if len(allowed_qos) > 0 and not any_elem_is_in_list(self.my_qos, allowed_qos):
            return False
        if len(denied_qos) > 0 and any_elem_is_in_list(self.my_qos, denied_qos):
            return False
        if len(allowed_groups) > 0 and not any_elem_is_in_list(
            self.my_posix_groups, allowed_groups
        ):
            return False
        return True

    def node_partitions_that_I_can_access(self, hostname: str) -> List[str]:
        return sorted([x for x in self.node_partitions[hostname] if self.check_partition_access(x)])

    def node_usage(self, hostname_whitelist=None):
        output_lines = []
        node_table = []
        for hostname, usage in self.nodes.items():
            if hostname_whitelist is not None and hostname not in hostname_whitelist:
                continue
            num_free_cpus = usage["total_cpus"] - usage["alloc_cpus"]
            free_cpu_frac = num_free_cpus / usage["total_cpus"]
            cpu_usage = (
                f"{generate_progress_bar(free_cpu_frac)} {num_free_cpus}/{usage['total_cpus']}"
            )
            free_mem_MB = usage["total_mem_MB"] - usage["alloc_mem_MB"]
            free_mem_frac = free_mem_MB / usage["total_mem_MB"]
            mem_usage = f"{generate_progress_bar(free_mem_frac)} {(free_mem_MB/1000):.1f} GB"
            if usage["total_gpus"] > 0:
                num_free_gpus = usage["total_gpus"] - usage["alloc_gpus"]
                free_gpu_frac = num_free_gpus / usage["total_gpus"]
                gpu_usage = f"{generate_progress_bar(free_gpu_frac)} {num_free_gpus}/{usage['total_gpus']} {usage['gpu_type']}"
            else:
                gpu_usage = ""
            partitions_to_access = ",".join(self.node_partitions_that_I_can_access(hostname))
            node_table.append([hostname, cpu_usage, mem_usage, gpu_usage, partitions_to_access])
        node_table = [
            ["Hostname", "Idle CPU Cores", "Idle Memory", "Idle GPUs", "Partitions"]
        ] + node_table
        output_lines = fmt_table(node_table)

        output_lines.append("")
        if self.num_untrackable_gpus > 0:
            output_lines.append(
                f" {self.num_untrackable_gpus} GPUs are shown as idle but are actually in use."
            )
        if len(self.down_nodes) > 0:
            output_lines.append(" some nodes are not shown beacause they are down.")
        output_lines += [
            ' to print output to stdout, set the PAGER environment variable to "NONE".',
            " press Q to exit",
            "",
            "",
        ]
        return output_lines


def main():
    if len(sys.argv) > 1:
        if sys.argv[1] == "--help":
            print(
                "\n".join(
                    [
                        "unity-slurm-node-usage",
                        "prints the usage of each unity slurm node",
                        "to filter the list of nodes, pipe a list of hostnames through stdin, one hostname per line",
                        'example: `echo "cpu001" | unity-slurm-node-usage`',
                        "example: `unity-slurm-find-nodes x86_64 | unity-slurm-node-usage`",
                        "example: `sinfo --noheader --Node -p cpu-preempt | awk '{print $1}' | unity-slurm-node-usage`",
                    ]
                )
            )
            sys.exit(0)
        else:
            print('unrecognized arguments. The only recognized argument is "--help".')
            sys.exit(1)
    analyzer = SlurmNodeUsageAnalyzer()
    if not sys.stdin.isatty():
        stdin_contents = sys.stdin.read().strip()
        if stdin_contents == "":
            hostname_whitelist = None
        else:
            hostname_whitelist = stdin_contents.splitlines()
            nodes_not_found = sorted(
                list(set(hostname_whitelist) - set(analyzer.nodes) - set(analyzer.down_nodes))
            )
            if len(nodes_not_found) > 0:
                print(
                    f"the following hostnames were requested but were not found: {nodes_not_found}",
                    file=sys.stderr,
                )
                sys.exit(1)
    else:
        hostname_whitelist = None
    output_lines = analyzer.node_usage(hostname_whitelist)
    pager_environ = os.environ.get("PAGER", "")
    if pager_environ.lower() == "none":
        print_output_exit(output_lines)
    if pager_environ:
        try:
            pipe_output_pager_exit(pager_environ, output_lines, shell=True)
        except FileNotFoundError:
            print(f'$PAGER="{pager_environ}" but I can\'t find it!', file=sys.stderr)
    which_less = shutil.which("less")
    if which_less:
        pipe_output_pager_exit([which_less, "-RS"], output_lines)
    print_output_exit(output_lines)


if __name__ == "__main__":
    main()
